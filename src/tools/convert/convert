#!/bin/bash

# Copyright (c) 2015 SONATA-NFV, 2017 5GTANGO
# ALL RIGHTS RESERVED.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Neither the name of the SONATA-NFV, 5GTANGO
# nor the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written
# permission.

# This work has been performed in the framework of the SONATA project,
# funded by the European Commission under Grant number 671517 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the SONATA
# partner consortium (www.sonata-nfv.eu).

# This work has been performed in the framework of the 5GTANGO project,
# funded by the European Commission under Grant number 761493 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the 5GTANGO
# partner consortium (www.5gtango.eu).

EXEC="tng-sdk-img convert"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VERSION="0.1"

BASE_IMAGE_URL="http://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img"
BASE_IMAGE=$(mktemp --suffix converter)
BASE_IMAGE_SPECIFIED=false
USE_LOCAL_REGISTRY=false
REGISTRY_PORT=5000
PLATFORM="sonata"

KVM_HOST_IP="10.0.2.2"


function die() {
  echo "${@}"
  echo "Try '${EXEC} --help' for more information."
  exit 1
}


function print_help() {
  echo "Usage:"
  echo -e "\t${EXEC} [OPTIONS] VNFD"
  echo "Options:"
  echo -e "\t-h, --help"
  echo -e "\t-v, --version"
  echo -e "\t-r, --local-registry             \tRun local docker registry. Specify to use local docker images."
  echo -e "\t-b, --base-image <path>    \tPath to the base image. Ubuntu 16.04 cloud image will be downloaded to /tmp if not specified."
}


function check_requirements() {
  echo "Checking requirements"
  local commands=(wget cloud-localds kvm shyaml curl)
  for command in "${commands[@]}"; do
    command -v "${command}" &> /dev/null
    [[ ${?} -eq 0 ]] || die "${command} not found"
  done
  echo "OK"
}


function create_seed() {
  echo "Creating the seed"
  seed_image=$(mktemp --suffix converter)
  local user_data_file=$(mktemp --suffix converter)
  local udev_rules_file=$(mktemp --suffix converter)
  local service_file="${DIR}/vnf-container.service"
  local user_data_template="${DIR}/user-data.template"
  local netplug_file="${DIR}/netplug"

  IFS=', ' read -r -a array <<< "${vdu_interfaces}";
  for index in "${!array[@]}"; do
    echo "KERNEL==\"e*\" SUBSYSTEM==\"net\" ATTRS{ifindex}==\"$((index+2))\" NAME=\"${array[index]}\"" >> "${udev_rules_file}"
  done

  if [[ "${mgmt_vdu}" == "${vdu_id}" ]]; then
    management_interface="${mgmt_cp}"
  else
    management_interface="${array[0]}"
  fi

  local vnf_container_service=$(cat ${service_file} | sed "s/^/    /")
  local netplug=$(cat ${netplug_file} | sed "s/^/    /")
  local udev_rules=$(cat ${udev_rules_file} | sed "s/^/    /")
  local vdu_interfaces=$(echo "${vdu_interfaces}" | xargs -n1 | sed "s/^/    /")
  local docker_conf="    {\"insecure-registries\":[\"${KVM_HOST_IP}:${REGISTRY_PORT}\"]}"

  eval "cat << EOF > "${user_data_file}"
$(<${user_data_template})
EOF
  " 2> /dev/null

  cloud-localds "${seed_image}" "${user_data_file}"

  rm -f "${user_data_file}"
  rm -f "${udev_rules_file}"
  echo "OK"
}


function delete_seed() {
  echo "Deleting the seed"
  rm -f "${seed_image}"
  echo "OK"
}


function get_base_image() {
  echo "Downloading the base image"
  wget "${BASE_IMAGE_URL}" -O "${BASE_IMAGE}" -q --show-progress
  echo "OK"
}


function delete_base_image() {
  echo "Deleting the base image"
  rm -f "${BASE_IMAGE}"
  echo "OK"
}


function create_vdu() {
  echo "Creating VDU"
  local vm_file="${vnf_name}_${vdu_id}.qcow2"
  cp "${BASE_IMAGE}" "${vm_file}"
  kvm -display none -m 1024 -cdrom "${seed_image}" "${vm_file}" &
  local kvm_pid="${!}"
  while ps -p "${kvm_pid}" > /dev/null; do
   echo -n "."
   sleep 1
  done
  echo
  echo "OK"
}


function docker_image_exists() {
  local docker_image=(${1//:/ })
  local name="${docker_image[0]}"
  local tag="${docker_image[1]}"
  [[ -n "${tag}" ]] || tag="latest"
  curl --silent -f -lSL https://index.docker.io/v1/repositories/"${name}"/tags/"${tag}" &> /dev/null;
  return "${?}"
}


function set_registry_port() {
  local port=0
  local lowerport=0
  local upperport=0

  read lowerport upperport < /proc/sys/net/ipv4/ip_local_port_range
  while :
  do
    port="`shuf -i "${lowerport}"-"${upperport}" -n 1`"
    ss -lpn | grep -q ":${port} " || break
  done

  REGISTRY_PORT="${port}"
}


function start_docker_registry() {
  echo "Starting the local docker registry."
  set_registry_port
  docker run -d -p "${REGISTRY_PORT}":5000 --restart=always --name converter_registry registry:2
  while ! nc -z localhost "${REGISTRY_PORT}"; do echo -n "."; sleep 1; done
  echo "OK"
}


function push_image() {
  image="${1}"
  echo "Pushing the image ${image} to the local docker registry"
  local image_tag="localhost:${REGISTRY_PORT}/vnf"
  docker tag "${image}" "${image_tag}"
  docker push "${image_tag}"
  docker image rm "${image_tag}" &> /dev/null
  echo "OK"
}


function stop_docker_registry() {
  echo "Stopping the local docker registry."
  docker container stop converter_registry > /dev/null && docker container rm -v converter_registry > /dev/null
  echo "OK"
}


function convert() {
  echo "Starting the conversion"
  vnf_name=$(cat "${VNFD}" | shyaml get-value name)

  # Get management interface
  read -a mgmt <<< $(cat "${VNFD}" | python "${DIR}"/get_management_connection_point.py)
  mgmt_vdu=${mgmt[0]}
  mgmt_cp=${mgmt[1]}

  # Extract VDUs from descriptor and save them to temporary directory
  local vdu_dir=`mktemp -d --suffix converter`
  cat "${VNFD}" | shyaml get-values virtual_deployment_units | head -n -1 | csplit -zs -f "${vdu_dir}"/ - /^$/ {*}

  for vdu in "${vdu_dir}"/*; do
    vdu_id=$(cat "${vdu}" | shyaml get-value id)
    vdu_format=$(cat "${vdu}" | shyaml get-value vm_image_format)
    vdu_image=$(cat "${vdu}" | shyaml get-value vm_image)
    vdu_interfaces=$(cat "${vdu}" | shyaml get-value connection_points | grep id | cut -d ' ' -f 3 | xargs)

    echo "Processing ${vdu_id}"

    if [ "${vdu_format}" != "docker" ]; then
      echo "WARNING: 'vm_image_format' is not 'docker'. Skipping the VDU."
      continue
    fi

    if "${USE_LOCAL_REGISTRY}"; then
      if [[ -z "$(docker images -q ${vdu_image} 2> /dev/null)" ]]; then
        echo "WARNING: The docker image '${vdu_image}' does not exist locally. Trying to find it in Docker hub."
        if ! docker_image_exists "${vdu_image}"; then
          echo "WARNING: The docker image '${vdu_image}' does not exist in Docker Hub. Skipping the VDU."
          continue
        fi
      else
        push_image "${vdu_image}"
        vdu_image="$KVM_HOST_IP:${REGISTRY_PORT}/vnf"
      fi
    else
      if ! docker_image_exists "${vdu_image}"; then
        echo "WARNING: The docker image '${vdu_image}' does not exist in Docker Hub. Skipping the VDU."
        continue
      fi
    fi

    create_seed
    create_vdu
    delete_seed
  done

  rm -rf "${vdu_dir}"
  echo "The conversion is finished."
}


function main() {
  check_requirements

  if [[ "${#}" -lt 1 ]]; then
    die "ERROR: A VNFD is not specified."
    exit 1
  fi

  while [[ "${#}" -gt 0 ]]; do
    case "${1}" in
      -h|--help)
        print_help
        exit 0
        ;;
      -v|--version)
        print_version
        exit 0
        ;;
      -b|--base-image)
        [[ -n "${2}" ]] || die "ERROR: A base image is not specified."
        BASE_IMAGE="${2}"
        BASE_IMAGE_SPECIFIED=true
        shift 2
        ;;
      -r|--local-reqistry)
        USE_LOCAL_REGISTRY=true
        shift 1
        ;;
      -*|--*)
        die "ERROR: Unknown argument '${1}'"
        ;;
      *)
        [[ -z "${VNFD}" ]] || die "ERROR: Too much arguments."
        VNFD="${1}"
        shift
        ;;
    esac
  done

  [[ -n "${VNFD}" ]] || die "ERROR: A VNFD is not specified."
  [[ -f "${VNFD}" ]] || die "ERROR: The file ${VNFD} does not exist."


  [[ "${USE_LOCAL_REGISTRY}" = true ]] && start_docker_registry
  [[ "${BASE_IMAGE_SPECIFIED}" = false ]] && get_base_image

  convert

  [[ "${BASE_IMAGE_SPECIFIED}" = false ]] && delete_base_image
  [[ "${USE_LOCAL_REGISTRY}" = true ]] && stop_docker_registry
}


main "${@}"

